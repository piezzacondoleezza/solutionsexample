#include<iostream>

struct BadOptionalAccess {};

template <typename T>
class Optional {
private:
    alignas(T) unsigned char data[sizeof(T)];
    bool defined = false;
    void Deleter() {
        if (defined)
            reinterpret_cast<T*>(data)->~T();
        defined = false;
    }

public:
    Optional() = default;
    Optional(const T& elem) {
        new (data) T(elem);
        defined = true;
    }
    Optional(T && elem) {
        new (data) T(std::move(elem));
        defined = true;
    }
    Optional(const Optional& other) {
        if (other.defined) {
            new (data) T(*other);
            defined = true;
        }
    }
    Optional& operator=(const Optional& other) {
        if (this != &other) {
            if (other.defined) {
                if (!defined) {
                    new (data) T(*other);
                } else {
                    *(*this) = *other;
                }
                defined = true;
            } else {
                Deleter();
            }
        }
        return *this;
    }
    Optional& operator=(const T& elem) {
        if (!defined)
            new (data) T(elem);
        else
            *(*this) = elem;
        defined = true;
        return *this;
    }
    Optional& operator=(T && elem) {
        if (!defined)
            new (data) T(std::move(elem));
        else
            *(*this) = std::move(elem);
        defined = true;
        return *this;
    }
    bool has_value() const {
        return defined;
    }
    T& operator*() {
        return *(reinterpret_cast<T*>(data));
    }
    const T& operator*() const {
        return *(reinterpret_cast<const T*>(data));
    }
    T* operator->() {
        return reinterpret_cast<T*>(data);
    }
    const T* operator->() const {
        return reinterpret_cast<const T*>(data);
    }

    T& value() {
        if (defined) {
            return *(*this);
        }
        throw BadOptionalAccess();
    }
    const T& value() const {
        if (defined) {
            return *(*this);
        }
        throw BadOptionalAccess();
    }

    void reset() {
        Deleter();
    }

    ~Optional() {
        Deleter();
    }
};


